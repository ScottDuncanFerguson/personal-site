{"version":3,"sources":["webpack://ts-react-webpack/./src/containers/views/Home/menu.tsx","webpack://ts-react-webpack/./src/containers/views/Home/Header/index.scss?9e67","webpack://ts-react-webpack/./src/containers/views/Home/Header/index.tsx","webpack://ts-react-webpack/./src/containers/views/Home/Sider/index.scss?e175","webpack://ts-react-webpack/./src/containers/views/Home/Sider/Menu.tsx","webpack://ts-react-webpack/./src/containers/views/Home/Sider/index.tsx","webpack://ts-react-webpack/./src/containers/views/Home/index.tsx","webpack://ts-react-webpack/./src/containers/views/Home/index.scss?ae41","webpack://ts-react-webpack/./src/store/useRootStore.ts"],"names":["loadComponent","loader","Loadable","fallback","PageLoading","asynchronousComponents","SocketDebugger","Users","id","path","title","icon","CoffeeOutlined","component","exact","UserOutlined","observer","useRootStore","globalStore","authStore","IconMenuFold","sideBarCollapsed","MenuUnfoldOutlined","MenuFoldOutlined","className","onClick","toggleSideBarCollapsed","GithubOutlined","styles","window","open","GITHUB_LINK","LogoutOutlined","logout","SubMenu","SiderMenu","React","levelMap","goto","info","history","this","props","routerStore","selectedMenu","menu","item","String","key","currentRoute","push","onOpenChange","openKeys","navOpenKeys","setOpenKeys","latestOpenKey","find","includes","latestCloseKey","nextOpenKeys","getAncestorKeys","concat","getPathArray","array","current","result","getPath","pid","unshift","queryArray","map","getParent","index","hasOwnProperty","call","getMenus","menuTree","children","location","pathname","arrayToTree","render","sideBarTheme","menuItems","currentMenu","pathToRegexp","exec","selectedKeys","theme","mode","menuProps","computed","userInfo","changeSiderTheme","ChangeTheme","classnames","checkedChildren","unCheckedChildren","checked","onChange","val","trigger","collapsible","collapsed","AntDesignOutlined","m","Error","useContext","RootContext"],"mappings":"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","file":"static/js/home.177.d09e370d4a94947d8034.js","sourcesContent":["import React from 'react'\nimport Loadable from '@loadable/component'\nimport { CoffeeOutlined, UserOutlined } from '@ant-design/icons'\n\nimport PageLoading from '@components/PageLoading'\n\nconst loadComponent = (loader: () => Promise<any>) => Loadable(loader, { fallback: <PageLoading /> })\n\nexport const asynchronousComponents = {\n    SocketDebugger: loadComponent(() => import(/* webpackChunkName: \"socket-debugger\" */ '@views/SocketDebugger')),\n    Users: loadComponent(() => import(/* webpackChunkName: \"users\" */ '@views/Users'))\n}\n\n// all routers key\nexport type AsynchronousComponentKeys = keyof typeof asynchronousComponents\n\nexport interface IMenu {\n    title: string\n    id: number\n    pid?: number\n    path?: string\n    icon?: JSX.Element\n    component?: AsynchronousComponentKeys\n    exact?: boolean\n}\n\nexport interface IMenuInTree extends IMenu {\n    children?: IMenuInTree[]\n}\n\nexport const menu: IMenu[] = [\n    {\n        id: 1,\n        path: '/',\n        title: 'SocketDebugger',\n        icon: <CoffeeOutlined />,\n        component: 'SocketDebugger',\n        exact: true\n    },\n    {\n        id: 2,\n        path: '/users',\n        title: 'Users',\n        icon: <UserOutlined />,\n        component: 'Users',\n        exact: true\n    }\n]\n\nexport default menu\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"header--3-VAJqNh\",\"trigger\":\"trigger--azCEfSVs\",\"right\":\"right--3WsjOOCS\",\"rightIcon\":\"rightIcon--34774XX2\"};","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { Layout } from 'antd'\nimport { MenuUnfoldOutlined, MenuFoldOutlined, GithubOutlined, LogoutOutlined } from '@ant-design/icons'\n\nimport styles from './index.scss'\nimport useRootStore from '@store/useRootStore'\nimport { GITHUB_LINK } from '@constants/index'\n\nfunction Header() {\n    const { globalStore, authStore } = useRootStore()\n    const IconMenuFold = globalStore.sideBarCollapsed ? MenuUnfoldOutlined : MenuFoldOutlined\n    return (\n        <Layout.Header className={styles.header}>\n            <IconMenuFold className={styles.trigger} onClick={globalStore.toggleSideBarCollapsed} />\n            <div className={styles.right}>\n                <GithubOutlined className={styles.rightIcon} onClick={() => window.open(GITHUB_LINK)} />\n                <LogoutOutlined className={styles.rightIcon} onClick={authStore.logout} />\n            </div>\n        </Layout.Header>\n    )\n}\n\nexport default observer(Header)\n","// extracted by mini-css-extract-plugin\nexport default {\"sider\":\"sider--1q_jEs1L\",\"logoBox\":\"logoBox--1kbAH9v1\",\"dark\":\"dark--3S2mXy9f\",\"menu\":\"menu--lHPfBHq1\",\"changeTheme\":\"changeTheme--2_h2fmum\"};","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { computed } from 'mobx'\nimport { Menu } from 'antd'\nimport { pathToRegexp } from 'path-to-regexp'\nimport { MenuInfo } from 'rc-menu/lib/interface'\n\nimport styles from './index.scss'\nimport { RootConsumer } from '@shared/App/Provider'\nimport { arrayToTree, queryArray } from '@utils/index'\nimport menu, { IMenu, IMenuInTree } from './../menu'\n\nconst { SubMenu } = Menu\n\ninterface IProps {\n    sideBarCollapsed: boolean\n    sideBarTheme: IGlobalStore.SideBarTheme\n    navOpenKeys: string[]\n    setOpenKeys: (openKeys: string[]) => void\n    userInfo: IAuthStore.UserInfo\n    routerStore: RouterStore\n}\n\n@observer\nclass SiderMenu extends React.Component<IProps> {\n    // 打开的菜单层级记录\n    private levelMap: NumberObject = {}\n\n    @computed\n    get currentRoute() {\n        return this.props.routerStore.location.pathname\n    }\n\n    @computed\n    get menuTree() {\n        return arrayToTree<IMenuInTree>(menu, 'id', 'pid')\n    }\n\n    @computed\n    get menuProps() {\n        const { sideBarCollapsed, navOpenKeys } = this.props\n        return !sideBarCollapsed\n            ? {\n                  onOpenChange: this.onOpenChange,\n                  openKeys: navOpenKeys\n              }\n            : {}\n    }\n\n    goto = (info: MenuInfo) => {\n        const { history } = this.props.routerStore\n        const selectedMenu = menu.find(item => String(item.id) === info.key)\n        if (selectedMenu && selectedMenu.path && selectedMenu.path !== this.currentRoute) {\n            history.push(selectedMenu.path)\n        }\n    }\n\n    onOpenChange = (openKeys: string[]): void => {\n        const { navOpenKeys, setOpenKeys } = this.props\n        const latestOpenKey = openKeys.find(key => !navOpenKeys.includes(key))\n        const latestCloseKey = navOpenKeys.find(key => !openKeys.includes(key))\n        let nextOpenKeys = []\n        if (latestOpenKey) {\n            nextOpenKeys = this.getAncestorKeys(latestOpenKey).concat(latestOpenKey)\n        }\n        if (latestCloseKey) {\n            nextOpenKeys = this.getAncestorKeys(latestCloseKey)\n        }\n        setOpenKeys(nextOpenKeys)\n    }\n\n    getPathArray = (array: IMenu[], current: IMenu): string[] => {\n        const result = [String(current.id)]\n        const getPath = (item: IMenu): void => {\n            if (item && item.pid) {\n                result.unshift(String(item.pid))\n                getPath(queryArray(array, String(item.pid), 'id'))\n            }\n        }\n        getPath(current)\n        return result\n    }\n\n    // 保持选中\n    getAncestorKeys = (key: string): string[] => {\n        const map = {}\n        const getParent = index => {\n            const result = [String(this.levelMap[index])]\n            if (this.levelMap[result[0]]) {\n                result.unshift(getParent(result[0])[0])\n            }\n            return result\n        }\n        for (const index in this.levelMap) {\n            if ({}.hasOwnProperty.call(this.levelMap, index)) {\n                map[index] = getParent(index)\n            }\n        }\n        return map[key] || []\n    }\n\n    // 递归生成菜单\n    getMenus = (menuTree: IMenuInTree[]) => {\n        return menuTree.map(item => {\n            if (item.children) {\n                if (item.pid) {\n                    this.levelMap[item.id] = item.pid\n                }\n                return (\n                    <SubMenu\n                        key={String(item.id)}\n                        title={\n                            <span>\n                                {item.icon}\n                                <span>{item.title}</span>\n                            </span>\n                        }\n                    >\n                        {this.getMenus(item.children)}\n                    </SubMenu>\n                )\n            }\n            return (\n                <Menu.Item key={String(item.id)}>\n                    {item.icon}\n                    <span>{item.title}</span>\n                </Menu.Item>\n            )\n        })\n    }\n\n    render() {\n        this.levelMap = {}\n        const { sideBarTheme } = this.props\n        const menuItems = this.getMenus(this.menuTree)\n        // 寻找选中路由\n        let currentMenu: IMenu = null\n        for (const item of menu) {\n            if (item.path && pathToRegexp(item.path).exec(this.currentRoute)) {\n                currentMenu = item\n                break\n            }\n        }\n        let selectedKeys: string[] = null\n        if (currentMenu) {\n            selectedKeys = this.getPathArray(menu, currentMenu)\n        }\n        if (!selectedKeys) {\n            selectedKeys = ['1']\n        }\n        return (\n            <Menu\n                className={styles.menu}\n                theme={sideBarTheme}\n                mode=\"inline\"\n                selectedKeys={selectedKeys}\n                onClick={this.goto}\n                {...this.menuProps}\n            >\n                {menuItems}\n            </Menu>\n        )\n    }\n}\n\nfunction Wrapper() {\n    return (\n        <RootConsumer>\n            {({ routerStore, authStore, globalStore }) => (\n                <SiderMenu\n                    routerStore={routerStore}\n                    userInfo={authStore.userInfo}\n                    sideBarCollapsed={globalStore.sideBarCollapsed}\n                    sideBarTheme={globalStore.sideBarTheme}\n                    navOpenKeys={globalStore.navOpenKeys}\n                    setOpenKeys={globalStore.setOpenKeys}\n                />\n            )}\n        </RootConsumer>\n    )\n}\n\nexport default Wrapper\n","import React from 'react'\nimport classnames from 'classnames'\nimport { observer } from 'mobx-react'\nimport { Layout, Switch } from 'antd'\nimport { AntDesignOutlined } from '@ant-design/icons'\n\nimport styles from './index.scss'\nimport useRootStore from '@store/useRootStore'\nimport SiderMenu from './Menu'\n\nfunction Sider() {\n    const { sideBarCollapsed, sideBarTheme, changeSiderTheme } = useRootStore().globalStore\n\n    const ChangeTheme = (\n        <div className={classnames(styles.changeTheme, sideBarTheme === 'dark' && styles.dark)}>\n            Switch Theme\n            <Switch\n                checkedChildren=\"dark\"\n                unCheckedChildren=\"light\"\n                checked={sideBarTheme === 'dark'}\n                onChange={val => changeSiderTheme(val ? 'dark' : 'light')}\n            />\n        </div>\n    )\n    return (\n        <Layout.Sider\n            className={styles.sider}\n            trigger={null}\n            theme={sideBarTheme}\n            collapsible\n            collapsed={sideBarCollapsed}\n        >\n            <div className={classnames(styles.logoBox, sideBarTheme === 'dark' && styles.dark)}>\n                <AntDesignOutlined />\n            </div>\n            <SiderMenu />\n            {!sideBarCollapsed && ChangeTheme}\n        </Layout.Sider>\n    )\n}\n\nexport default observer(Sider)\n","import React from 'react'\nimport { Layout } from 'antd'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport styles from './index.scss'\nimport Error from '@components/Error'\nimport menu, { asynchronousComponents } from './menu'\nimport Header from './Header'\nimport Sider from './Sider'\n\nfunction Home() {\n    return (\n        <Layout>\n            <Sider />\n            <Layout>\n                <Header />\n                <Layout.Content className={styles.content}>\n                    <Router>\n                        <Switch>\n                            {menu.map(m => {\n                                if (!m.path) {\n                                    return null\n                                }\n                                return (\n                                    <Route\n                                        key={m.id}\n                                        exact={m.exact}\n                                        path={m.path}\n                                        component={m.component ? asynchronousComponents[m.component] : null}\n                                    />\n                                )\n                            })}\n                            <Route component={Error} />\n                        </Switch>\n                    </Router>\n                </Layout.Content>\n            </Layout>\n        </Layout>\n    )\n}\n\nexport default Home\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"content--2C0RuexV\"};","import { useContext } from 'react'\n\nimport { RootContext } from '@shared/App/Provider'\n\nexport default function useRootStore() {\n    return useContext(RootContext)\n}\n"],"sourceRoot":""}