{"version":3,"sources":["webpack://scott-personal-site/./src/containers/views/SocketDebugger/index.scss?adb6","webpack://scott-personal-site/./src/containers/views/SocketDebugger/Handler/index.scss?ad71","webpack://scott-personal-site/./src/containers/views/SocketDebugger/Handler/Type.tsx","webpack://scott-personal-site/./src/containers/views/SocketDebugger/Handler/DataFormat.tsx","webpack://scott-personal-site/./src/services/websocket/socketIO.ts","webpack://scott-personal-site/./src/services/websocket/websocket.ts","webpack://scott-personal-site/./src/services/websocket/index.ts","webpack://scott-personal-site/./src/containers/views/SocketDebugger/Handler/Connect.tsx","webpack://scott-personal-site/./src/containers/views/SocketDebugger/Handler/Send.tsx","webpack://scott-personal-site/./src/containers/views/SocketDebugger/Handler/index.tsx","webpack://scott-personal-site/./src/containers/views/SocketDebugger/Browse/Message.tsx","webpack://scott-personal-site/./src/containers/views/SocketDebugger/Browse/index.scss?502b","webpack://scott-personal-site/./src/containers/views/SocketDebugger/Browse/index.tsx","webpack://scott-personal-site/./src/containers/views/SocketDebugger/index.tsx","webpack://scott-personal-site/./node_modules/moment/locale|sync|/[/](es-us(/.js)"],"names":["observer","socketStore","useRootStore","onChange","e","value","target","setSocketType","localStorage","setItem","LOCALSTORAGE_KEYS","socketType","disabled","socketIsConnected","SOCKER_TYPES","s","key","dataFormat","style","width","val","setDataFormat","DATA_FORMATS","d","patch","socketioWildcard","io","socketInstance","socket","send","event","data","retry","this","connected","emit","setTimeout","open","url","transports","unshift","reconnectionDelay","reconnection","reconnectionAttempts","reaction","_","__","r","close","dispose","on","attemptNumber","text","from","reason","timeout","err","console","warn","pkg","log","Array","length","reopenTimer","disconnectInitiative","Socket","EventEmitter","constructor","super","onopen","onmessage","conn","run","msg","JSON","stringify","readyState","OPEN","WebSocket","onclose","evt","code","clearTimeout","window","onerror","socketDisconnect","message","sendFromSocketIO","sendFromWebsocket","React","getItem","setUrl","className","isSocketIO","checked","notSupportPolling","setNotSupportPolling","styles","type","onClick","socketConnectFromSocketIO","socketConnectFromWebsocket","socketConnect","clearMessages","danger","localSocketIOEvents","initialSocketIOEvents","parse","slice","content","setContent","textContent","setTextContent","jsonContent","setJsonContent","socketIOEvent","setSocketIOEvent","socketIOEvents","setSocketIOEvents","modalVisible","setModalVisible","canSend","sendingContent","toggleModalVisible","visible","options","placeholder","filterOption","inputValue","option","toUpperCase","includes","placement","title","onConfirm","top","onOk","error","onCancel","autoSize","minRows","maxRows","name","theme","padding","minHeight","maxHeight","overflow","borderRadius","wordWrap","wordBreak","onAdd","uSrc","updated_src","onEdit","onDelete","src","block","size","some","newSocketIOEvents","time","moment","format","color","fromText","marginBottom","vList","measureCache","CellMeasurerCache","fixedWidth","handleMessagesChanged","len","clearAll","current","scrollToRow","renderItem","index","parent","item","messages","CellMeasurer","cache","columnIndex","rowIndex","useOnMount","rowCount","AutoSizer","height","ref","overscanRowCount","deferredMeasurementCache","rowHeight","rowRenderer","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","Error","keys","Object","resolve","module","exports"],"mappings":"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","file":"static/js/socket-debugger.938.c2d30dd2a94248356dac.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"container--1i6Px5Qu\"};","// extracted by mini-css-extract-plugin\nexport default {\"handler\":\"handler--1KkX69_Y\",\"head\":\"head--2SfvaVIL\",\"reset\":\"reset--1YneTTTf\",\"autoComplete\":\"autoComplete--2x1eKk8G\",\"btnCover\":\"btnCover--2-UztjI7\",\"content\":\"content--kJcrJFU3\",\"textContent\":\"textContent--R_05KlXR\",\"container\":\"container--tmDn9tpw\",\"socketUrlInput\":\"socketUrlInput--1peQ6HT-\",\"connect\":\"connect--2JHT-tN9\",\"btn\":\"btn--1XbEc-_7\",\"checkbox\":\"checkbox--TRo2rgKB btn--1XbEc-_7\",\"tips\":\"tips--2ukdBBUO\"};","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { Radio } from 'antd'\nimport { RadioChangeEvent } from 'antd/lib/radio'\n\nimport useRootStore from '@store/useRootStore'\nimport { LOCALSTORAGE_KEYS } from '@constants/index'\nimport { SOCKER_TYPES } from '@constants/socket'\n\nfunction Type() {\n    const { socketStore } = useRootStore()\n\n    function handleTypeChange(e: RadioChangeEvent) {\n        const { value } = e.target\n        socketStore.setSocketType(value)\n        localStorage.setItem(LOCALSTORAGE_KEYS.SOCKET_TYPE, value)\n    }\n    return (\n        <Radio.Group\n            onChange={handleTypeChange}\n            value={socketStore.socketType}\n            disabled={socketStore.socketIsConnected}\n        >\n            {SOCKER_TYPES.map(s => (\n                <Radio.Button value={s} key={s}>\n                    {s}\n                </Radio.Button>\n            ))}\n        </Radio.Group>\n    )\n}\n\nexport default observer(Type)\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { Select } from 'antd'\n\nimport useRootStore from '@store/useRootStore'\nimport { LOCALSTORAGE_KEYS } from '@constants/index'\nimport { DATA_FORMATS } from '@constants/socket'\n\nfunction DataFormat() {\n    const { socketStore } = useRootStore()\n\n    function handleChange(val: ISocketStore.DataFormatType) {\n        socketStore.setDataFormat(val)\n        localStorage.setItem(LOCALSTORAGE_KEYS.DATA_FORMAT, val)\n    }\n    return (\n        <Select<ISocketStore.DataFormatType>\n            value={socketStore.dataFormat}\n            style={{ width: 120 }}\n            onChange={handleChange}\n        >\n            {DATA_FORMATS.map(d => (\n                <Select.Option key={d} value={d}>\n                    {d}\n                </Select.Option>\n            ))}\n        </Select>\n    )\n}\n\nexport default observer(DataFormat)\n","import io from 'socket.io-client'\nimport socketioWildcard from 'socketio-wildcard'\nimport { message } from 'antd'\nimport { reaction } from 'mobx'\n\nimport { socketStore } from '@store/index'\n\nconst patch = socketioWildcard(io.Manager)\n\n/**\n * socket 通信\n *\n * @export\n * @class Socket\n */\nclass Socket {\n    socket: SocketIOClient.Socket\n\n    send(event: string, data: any, retry = 0) {\n        if (this.socket && this.socket.connected) {\n            this.socket.emit(event, data)\n        } else if (retry < 3) {\n            setTimeout(() => {\n                this.send(data, retry++)\n            }, 300)\n        }\n    }\n\n    open(url: string) {\n        const transports = ['websocket']\n        if (!socketStore.notSupportPolling) {\n            transports.unshift('polling')\n        }\n        this.socket = io.connect(url, {\n            reconnectionDelay: 1000,\n            reconnection: true,\n            reconnectionAttempts: 5,\n            transports\n        })\n\n        patch(this.socket)\n\n        reaction(\n            () => socketStore.socketType,\n            (_, __, r) => {\n                this.socket.close()\n                r.dispose()\n            }\n        )\n\n        this.socket.on('reconnect', attemptNumber => {\n            const text = `socket reconnect after attempt ${attemptNumber} times !!!`\n            socketStore.addMessage({\n                event: 'reconnect',\n                from: 'console',\n                data: text\n            })\n        })\n\n        // 被断开, 不重连\n        this.socket.on('disconnect', reason => {\n            socketStore.setSocketIsConnected(false)\n            const text = `socket disconnect because: ${reason} !!!`\n            socketStore.addMessage({\n                event: 'disconnect',\n                from: 'console',\n                data: text\n            })\n        })\n\n        this.socket.on('connect_timeout', timeout => {\n            const text = `socket connect_timeout: ${timeout} !!!`\n            socketStore.addMessage({\n                event: 'connect_timeout',\n                from: 'console',\n                data: text\n            })\n        })\n\n        // 连接错误\n        this.socket.on('connect_error', err => {\n            const text = 'socket connect_error !!!'\n            socketStore.addMessage({\n                event: 'connect_error',\n                from: 'console',\n                data: text\n            })\n            console.warn(err)\n        })\n\n        // 错误捕获\n        this.socket.on('error', err => {\n            socketStore.setSocketIsConnected(false)\n            const text = 'socket error !!!'\n            socketStore.addMessage({\n                event: 'error',\n                from: 'console',\n                data: text\n            })\n            console.warn(err)\n        })\n\n        this.socket.on('connect', () => {\n            socketStore.setSocketIsConnected(true)\n            const text = 'socket connected !!!'\n            socketStore.addMessage({\n                event: 'connect',\n                from: 'console',\n                data: text\n            })\n        })\n\n        this.socket.on('ping', () => {\n            socketStore.addMessage({\n                event: 'ping',\n                from: 'browser',\n                data: null\n            })\n        })\n\n        this.socket.on('pong', () => {\n            socketStore.addMessage({\n                event: 'pong',\n                from: 'server',\n                data: null\n            })\n        })\n\n        this.socket.on('*', pkg => {\n            console.log('on all socket callback: ', pkg)\n            if (pkg && pkg.data instanceof Array && pkg.data.length > 1) {\n                const event = pkg.data[0]\n                const data = pkg.data[1]\n                socketStore.addMessage({\n                    event,\n                    from: 'server',\n                    data\n                })\n            }\n        })\n    }\n}\n\nconst socketInstance = new Socket()\n\nfunction canSocketOpen() {\n    return !(socketInstance.socket && socketInstance.socket.connected)\n}\n\nexport function socketConnect(url: string) {\n    if (!canSocketOpen()) {\n        return message.error('Please disconnect the existing instance!!!')\n    }\n    socketInstance.open(url)\n}\n\nexport function socketDisconnect() {\n    if (socketInstance.socket && socketInstance.socket.connected) {\n        socketInstance.socket.close()\n    }\n}\n\nexport function send(event: string, data: any) {\n    if (!socketInstance.socket || !socketInstance.socket.connected) {\n        return message.error('Please connect to server!!!')\n    }\n    socketInstance.send(event, data)\n    socketStore.addMessage({\n        event,\n        from: 'browser',\n        data\n    })\n}\n","import { EventEmitter } from 'eventemitter3'\nimport { message } from 'antd'\nimport { reaction } from 'mobx'\n\nimport { socketStore } from '@store/index'\n\nlet reopenTimer: number = null\n// 是否主动断开\nlet disconnectInitiative = false\n\ninterface SocketMsg {\n    data: any\n}\n\n/**\n * socket 通信\n *\n * @export\n * @class Socket\n */\nclass Socket extends EventEmitter {\n    onopen: () => void\n    onmessage: (msg: SocketMsg) => void\n    conn: WebSocket = null\n\n    constructor() {\n        super()\n        this.run()\n    }\n\n    run() {\n        this.onopen = () => {\n            const text = 'socket connected !!!'\n            socketStore.setSocketIsConnected(true)\n            socketStore.addMessage({\n                event: 'connect',\n                from: 'console',\n                data: text\n            })\n        }\n\n        this.onmessage = (msg: SocketMsg) => {\n            if (!msg || !msg.data) {\n                return\n            }\n            socketStore.addMessage({\n                event: 'message',\n                from: 'server',\n                data: typeof msg.data === 'object' ? JSON.stringify(msg.data) : msg.data\n            })\n        }\n    }\n\n    send(data: any, retry = 0) {\n        if (this.conn && this.conn.readyState === this.conn.OPEN) {\n            this.conn.send(typeof data === 'object' ? JSON.stringify(data) : data)\n        } else if (retry < 3) {\n            setTimeout(() => {\n                this.send(data, retry++)\n            }, 300)\n        }\n    }\n\n    open(url: string) {\n        this.conn = new WebSocket(url)\n        this.conn.onclose = evt => {\n            socketStore.setSocketIsConnected(false)\n            const text = `socket close: ${typeof evt === 'object' ? evt.code : ''}`\n            socketStore.addMessage({\n                event: 'close',\n                from: 'console',\n                data: text\n            })\n            clearTimeout(reopenTimer)\n            if (!disconnectInitiative) {\n                reopenTimer = window.setTimeout(() => {\n                    this.open(url)\n                }, 3000)\n            }\n            disconnectInitiative = false\n        }\n        this.conn.onerror = evt => {\n            socketStore.setSocketIsConnected(false)\n            const text = `socket error: ${typeof evt === 'object' ? JSON.stringify((evt as any).code) : ''}`\n            socketStore.addMessage({\n                event: 'error',\n                from: 'console',\n                data: text\n            })\n        }\n\n        reaction(\n            () => socketStore.socketType,\n            (_, __, r) => {\n                clearTimeout(reopenTimer)\n                r.dispose()\n            }\n        )\n\n        if (this.onopen) {\n            this.conn.onopen = this.onopen\n        }\n        if (this.onmessage) {\n            this.conn.onmessage = this.onmessage\n        }\n        return this\n    }\n}\n\nconst socketInstance = new Socket()\n\nfunction canSocketOpen() {\n    return !(socketInstance.conn && socketInstance.conn.readyState === socketInstance.conn.OPEN)\n}\n\nexport function socketConnect(url: string) {\n    if (!canSocketOpen()) {\n        return message.error('Please disconnect the existing instance!!!')\n    }\n    socketInstance.open(url)\n}\n\nexport function socketDisconnect() {\n    if (socketInstance.conn && socketInstance.conn.readyState === socketInstance.conn.OPEN) {\n        socketInstance.conn.close()\n    }\n    disconnectInitiative = true\n}\n\nexport function send(_, data: any) {\n    if (!socketInstance.conn && socketInstance.conn.readyState !== socketInstance.conn.OPEN) {\n        return message.error('Please connect to server!!!')\n    }\n    socketInstance.send(data)\n    socketStore.addMessage({\n        event: null,\n        from: 'browser',\n        data\n    })\n}\n","import { socketStore } from '@store/index'\nimport {\n    socketConnect as socketConnectFromSocketIO,\n    socketDisconnect as socketDisconnectFromSocketIO,\n    send as sendFromSocketIO\n} from './socketIO'\nimport {\n    socketConnect as socketConnectFromWebsocket,\n    socketDisconnect as socketDisconnectFromWebsocket,\n    send as sendFromWebsocket\n} from './websocket'\n\nexport const socketConnect = (url: string) => {\n    return socketStore.isSocketIO ? socketConnectFromSocketIO(url) : socketConnectFromWebsocket(url)\n}\n\nexport const socketDisconnect = () => {\n    return socketStore.isSocketIO ? socketDisconnectFromSocketIO() : socketDisconnectFromWebsocket()\n}\n\nexport const send = (event: string, data: any) => {\n    return socketStore.isSocketIO ? sendFromSocketIO(event, data) : sendFromWebsocket(event, data)\n}\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { message, Input, Button, Checkbox } from 'antd'\n\nimport styles from './index.scss'\nimport useRootStore from '@store/useRootStore'\nimport { socketConnect, socketDisconnect } from '@services/websocket'\nimport { LOCALSTORAGE_KEYS } from '@constants/index'\n\nfunction Connect() {\n    const { socketStore } = useRootStore()\n\n    const [url, setUrl] = React.useState(localStorage.getItem(LOCALSTORAGE_KEYS.SOCKET_URL))\n\n    function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n        const { value } = e.target\n        setUrl(value)\n        localStorage.setItem(LOCALSTORAGE_KEYS.SOCKET_URL, value)\n    }\n\n    function handleConnect() {\n        if (!url) {\n            message.destroy()\n            return message.error('Please input socket url!')\n        }\n        socketConnect(url)\n        socketStore.clearMessages()\n    }\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.connect}>\n                <Input className={styles.socketUrlInput} value={url} onChange={handleChange} />\n                {socketStore.isSocketIO && (\n                    <Checkbox\n                        disabled={socketStore.socketIsConnected}\n                        className={styles.checkbox}\n                        checked={socketStore.notSupportPolling}\n                        onChange={e => socketStore.setNotSupportPolling(e.target.checked)}\n                    >\n                        no polling\n                    </Checkbox>\n                )}\n                <Button\n                    className={styles.btn}\n                    type=\"primary\"\n                    onClick={handleConnect}\n                    disabled={socketStore.socketIsConnected}\n                >\n                    connect\n                </Button>\n                <Button\n                    className={styles.btn}\n                    danger\n                    onClick={socketDisconnect}\n                    disabled={!socketStore.socketIsConnected}\n                >\n                    disconnect\n                </Button>\n            </div>\n            <blockquote className={styles.tips}>\n                protocol//ip or domain:host (example:\n                {socketStore.isSocketIO ? ' wss://showcase.jackple.com' : ' ws://127.0.0.1:3001'})\n            </blockquote>\n        </div>\n    )\n}\n\nexport default observer(Connect)\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { Button, AutoComplete, Popconfirm, Modal, Input, message } from 'antd'\nimport ReactJson from 'react-json-view'\n\nimport styles from './index.scss'\nimport useRootStore from '@store/useRootStore'\nimport { LOCALSTORAGE_KEYS } from '@constants/index'\nimport { DATA_FORMATS } from '@constants/socket'\nimport { send } from '@services/websocket'\n\nconst localSocketIOEvents = localStorage.getItem(LOCALSTORAGE_KEYS.SOCKET_IO_EVENTS)\nlet initialSocketIOEvents: { value: string }[] = localSocketIOEvents ? JSON.parse(localSocketIOEvents) : []\nif (initialSocketIOEvents.length > 30) {\n    initialSocketIOEvents = initialSocketIOEvents.slice(0, 30)\n}\n\nfunction Send() {\n    const { socketStore } = useRootStore()\n\n    const [content, setContent] = React.useState('')\n    const [textContent, setTextContent] = React.useState('')\n    const [jsonContent, setJsonContent] = React.useState<PlainObject>({})\n    const [socketIOEvent, setSocketIOEvent] = React.useState('')\n    const [socketIOEvents, setSocketIOEvents] = React.useState(initialSocketIOEvents)\n    const [modalVisible, setModalVisible] = React.useState(false)\n\n    const canSend = React.useMemo(() => {\n        if (socketStore.isSocketIO && !socketIOEvent) {\n            return false\n        }\n        return socketStore.socketIsConnected\n    }, [socketStore.isSocketIO, socketIOEvent, socketStore.socketIsConnected])\n\n    const sendingContent = React.useMemo(\n        () => (socketStore.dataFormat === DATA_FORMATS[0] ? jsonContent : textContent),\n        [socketStore.dataFormat, jsonContent, textContent]\n    )\n\n    function toggleModalVisible() {\n        setModalVisible(visible => !visible)\n    }\n\n    function handleOK() {\n        try {\n            setJsonContent(JSON.parse(content))\n            toggleModalVisible()\n        } catch (err) {\n            console.error(err)\n            message.destroy()\n            message.error('Please input json string!')\n        }\n    }\n\n    function handleSubmit() {\n        if (!socketStore.isSocketIO) {\n            return send(null, sendingContent)\n        } else if (!socketIOEvent) {\n            message.destroy()\n            return message.error('Please input event name!')\n        }\n        const hasStoraged = socketIOEvents.some(e => e.value === socketIOEvent)\n        if (!hasStoraged) {\n            const newSocketIOEvents = [{ value: socketIOEvent }, ...socketIOEvents]\n            setSocketIOEvents(newSocketIOEvents)\n            localStorage.setItem(LOCALSTORAGE_KEYS.SOCKET_IO_EVENTS, JSON.stringify(newSocketIOEvents))\n        }\n        send(socketIOEvent, sendingContent)\n    }\n\n    return (\n        <div>\n            {socketStore.isSocketIO && (\n                <AutoComplete\n                    className={styles.autoComplete}\n                    options={socketIOEvents}\n                    placeholder=\"Input event name\"\n                    value={socketIOEvent}\n                    onChange={e => setSocketIOEvent(e as string)}\n                    filterOption={(inputValue, option) => option.value.toUpperCase().includes(inputValue.toUpperCase())}\n                />\n            )}\n            {socketStore.dataFormat === DATA_FORMATS[0] ? (\n                <div className={styles.content}>\n                    <div className={styles.reset}>\n                        <Popconfirm placement=\"topLeft\" title=\"Confirm to reset?\" onConfirm={() => setJsonContent({})}>\n                            <Button>Reset</Button>\n                        </Popconfirm>\n                        <Button className={styles.btnCover} type=\"primary\" onClick={toggleModalVisible}>\n                            Custom\n                        </Button>\n                        <Modal\n                            title=\"Custom data\"\n                            style={{ top: 20 }}\n                            visible={modalVisible}\n                            onOk={handleOK}\n                            onCancel={toggleModalVisible}\n                        >\n                            <Input.TextArea\n                                placeholder=\"Please input json string\"\n                                autoSize={{ minRows: 4, maxRows: 10 }}\n                                value={content}\n                                onChange={({ target }) => setContent(target.value)}\n                            />\n                        </Modal>\n                    </div>\n                    <ReactJson\n                        name={false}\n                        theme=\"monokai\"\n                        style={{\n                            padding: 10,\n                            minHeight: 150,\n                            maxHeight: 500,\n                            overflow: 'auto',\n                            borderRadius: 3,\n                            wordWrap: 'break-word',\n                            wordBreak: 'break-all'\n                        }}\n                        onAdd={({ updated_src: uSrc }) => setJsonContent(uSrc as PlainObject)}\n                        onEdit={({ updated_src: uSrc }) => setJsonContent(uSrc as PlainObject)}\n                        onDelete={({ updated_src: uSrc }) => setJsonContent(uSrc as PlainObject)}\n                        src={jsonContent}\n                    />\n                </div>\n            ) : (\n                <Input.TextArea\n                    className={styles.textContent}\n                    placeholder=\"Input your sending content\"\n                    autoSize={{ minRows: 4, maxRows: 10 }}\n                    value={textContent}\n                    onChange={({ target }) => setTextContent(target.value)}\n                />\n            )}\n            <Button block size=\"large\" disabled={!canSend} type=\"primary\" onClick={handleSubmit}>\n                Send\n            </Button>\n        </div>\n    )\n}\n\nexport default observer(Send)\n","import React from 'react'\n\nimport styles from './index.scss'\nimport Type from './Type'\nimport DataFormat from './DataFormat'\nimport Connect from './Connect'\nimport Send from './Send'\n\nfunction Handler() {\n    return (\n        <div className={styles.handler}>\n            <div className={styles.head}>\n                <Type />\n                <DataFormat />\n            </div>\n            <Connect />\n            <Send />\n        </div>\n    )\n}\n\nexport default Handler\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport moment from 'moment'\nimport { Tag } from 'antd'\n\nimport styles from './index.scss'\n\ninterface IProps {\n    message: ISocketStore.Message\n    style: React.CSSProperties\n}\n\nfunction Message({ message, style }: IProps) {\n    const time = moment(message.time).format('h:mm:ss a')\n    const color = message.from === 'browser' ? '#87d068' : message.from === 'server' ? '#2db7f5' : '#108ee9'\n    const fromText = message.from === 'browser' ? 'You' : message.from === 'server' ? 'Server' : 'Console'\n    const content = typeof message.data === 'object' ? JSON.stringify(message.data) : message.data\n\n    return (\n        <div className={styles.message} style={style}>\n            <div className={styles.messageHeader} style={{ marginBottom: !!content ? 5 : 0 }}>\n                {message.event && <Tag color=\"#f50\">{message.event}</Tag>}\n                <Tag color={color}>{fromText}</Tag>\n                <span>{time}</span>\n            </div>\n            <div className={styles.content}>{content}</div>\n        </div>\n    )\n}\n\nexport default observer(Message)\n","// extracted by mini-css-extract-plugin\nexport default {\"browse\":\"browse--17QHhAaK\",\"message\":\"message--3UadhdfF\",\"messageHeader\":\"messageHeader--2gGHdTkv\",\"content\":\"content--CgRHCXan\"};","import React from 'react'\nimport { reaction } from 'mobx'\nimport { observer } from 'mobx-react'\nimport { AutoSizer } from 'react-virtualized/dist/es/AutoSizer'\nimport { CellMeasurerCache, CellMeasurer } from 'react-virtualized/dist/es/CellMeasurer'\nimport { List as VList, ListRowProps } from 'react-virtualized/dist/es/List'\n\nimport styles from './index.scss'\nimport useRootStore from '@store/useRootStore'\nimport { useOnMount } from '@utils/hooks'\nimport Message from './Message'\n\nfunction Browse() {\n    const { socketStore } = useRootStore()\n\n    const vList = React.useRef<VList>(null)\n    const measureCache = new CellMeasurerCache({\n        fixedWidth: true,\n        minHeight: 43\n    })\n\n    function handleMessagesChanged(len: number) {\n        if (len === 0) {\n            return measureCache.clearAll()\n        }\n        if (vList.current) {\n            vList.current.scrollToRow(len - 1)\n        }\n    }\n\n    function listenMessagesLen() {\n        return reaction(() => socketStore.messages.length, handleMessagesChanged)\n    }\n\n    useOnMount(listenMessagesLen)\n\n    function renderItem({ index, key, parent, style }: ListRowProps) {\n        const item = socketStore.messages[index]\n        return (\n            <CellMeasurer cache={measureCache} columnIndex={0} key={key} parent={parent} rowIndex={index}>\n                <Message style={style} message={item} />\n            </CellMeasurer>\n        )\n    }\n    const rowCount = socketStore.messages.length\n    return (\n        <div className={styles.browse}>\n            <AutoSizer>\n                {({ width, height }) => (\n                    <VList\n                        width={width}\n                        height={height}\n                        ref={vList}\n                        overscanRowCount={0}\n                        rowCount={rowCount}\n                        deferredMeasurementCache={measureCache}\n                        rowHeight={measureCache.rowHeight}\n                        rowRenderer={renderItem}\n                    />\n                )}\n            </AutoSizer>\n        </div>\n    )\n}\n\nexport default observer(Browse)\n","import React from 'react'\n\nimport styles from './index.scss'\nimport Handler from './Handler'\nimport Browse from './Browse'\n\nfunction SocketDebugger() {\n    return (\n        <div className={styles.container}>\n            <Handler />\n            <Browse />\n        </div>\n    )\n}\n\nexport default SocketDebugger\n","var map = {\n\t\"./es-us\": 71146,\n\t\"./es-us.js\": 71146,\n\t\"./zh-cn\": 83839,\n\t\"./zh-cn.js\": 83839\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 14920;"],"sourceRoot":""}